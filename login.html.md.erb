---
title: Logging in to Enterprise PKS
owner: PKS
---

This topic describes how to log in to <%= vars.product_full %>.

## <a id='overview'></a>Overview

To manage <%= vars.product_short %>-deployed clusters, you use the PKS Command
Line Interface (PKS CLI). When you log in to <%= vars.product_short %> successfully
for the first time, the PKS CLI generates a local `creds.yml` file that contains
the API endpoint, refresh token, access token, and CA certificate, if applicable.

By default, `creds.yml` is saved in the `~/.pks` directory on your local system.
You can use the `PKS_HOME` environment variable to override this location and
store `creds.yml` in any directory on your system.

## <a id='prerequisites'></a>Prerequisites

Before you can log in to <%= vars.product_short %>, you must have the following:

- A running <%= vars.product_short %> environment. See the _Installing <%= vars.product_short %>_
section for your cloud provider.
- The PKS CLI installed on your local system. See [Installing the PKS CLI](installing-pks-cli.html).
- A username and password that has access to the PKS API. 
See [Managing <%= vars.product_short %> Admin Users with UAA](manage-users.html).   

## <a id='login'></a>Log in to the PKS CLI

Use the command in this section to log in as an individual user.
The login procedure is the same for users created in UAA or users from external LDAP groups.

On the command line, run the following command in your terminal to log in to the PKS CLI:

<pre>
pks login -a PKS-API -u USERNAME -p PASSWORD --ca-cert CERT-PATH
</pre>

Replace the placeholder values in the command as follows:

* `PKS-API` is the domain name for the PKS API that you entered in **Ops Manager** > **<%= vars.product_tile %>** > **PKS API** > **API Hostname (FQDN)**.
For example, `api.pks.example.com`.

* `USERNAME` and `PASSWORD` belong to the account you created in the [Grant <%= vars.product_short %> Access to an Individual User](manage-users.html#uaa-user) section of _Managing <%= vars.product_short %> Admin Users with UAA_.
If you do not use `-p` to provide a password, the PKS CLI prompts for the password interactively.
Pivotal recommends running the login command without the `-p` flag for added security.

* `CERT-PATH` is the path to your root CA certificate.
Provide the certificate to validate the PKS API certificate with SSL.<br><br>
For example:
  <pre class="terminal">
  $ pks login -a api.pks.example.com -u alana \
  --ca-cert /var/tempest/workspaces/default/root&#95;ca&#95;certificate
  </pre>

    If you are logging in to a trusted environment, you can use `-k` to skip SSL verification instead of `--ca-cert CERT-PATH`.<br><br>
    For example:
    <pre class="terminal">
    $ pks login -a api.pks.example.com -u alana -k</pre>
    
    <%= partial "saml-sso-login" %>

##<a id='client'></a> Log in to the PKS CLI as an Automated Client

To log in to the PKS CLI as an automated client for a script or service, run the following command:

```
pks login -a PKS-API --client-name CLIENT-NAME --client-secret CLIENT-SECRET --ca-cert CERTIFICATE-PATH
```
Where:

* `PKS-API` is the domain name for the PKS API that you entered in **Ops Manager** > **<%= vars.product_tile %>** > **PKS API** > **API Hostname (FQDN)**. For example, `api.pks.example.com`.
* `CLIENT-NAME` is your OAuth client ID.
* `CLIENT-SECRET` is your OAuth client secret.
* `CERTIFICATE-PATH` is the path to your root CA certificate.
Provide the certificate to validate the PKS API certificate with SSL.

    For example:
    <pre class="terminal">
    $ pks login -a api.pks.example.com \
    --client-name automated-client \
    --client-secret randomly-generated-secret \
    --ca-cert /var/tempest/workspaces/default/root&#95;ca&#95;certificate
    </pre>
    
    <%= partial "saml-sso-login" %>

## <a id="pks-api-access"></a> Export PKS API Access Token

This procedure stores a PKS API access token as an environment variable that
you can use when executing PKS API calls on the command line.

<%= partial 'create-auth-token-var' %>

